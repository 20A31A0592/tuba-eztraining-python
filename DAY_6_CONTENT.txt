
EXCEPTION HANDLING

when there is an exception, the developer does not want interruption or disturbance 
in the program flow to acieve this we are using exception handling
try block
except block
finally block

3 types
compile time error      // syntax error
logical error                //logic error in code
run time error             //error in displaying o/p   //infinite loop

example:
a=100
b=0
try:
                print(a/b)
except Exception as e:
                print("its an error:",e)
finally:
                print("done!")
Output:
its an error: division by zero
done!

example:
#specific error-specific exception
#single try-multiple exceptions
a=10
try:
                b=int(input("enter b:"))
                print("the resource is open")
                print(a/b)
except ZeroDivisionError as e:
                print("its an error:",e)
except ValueError as e:
                print("its an error:",e)
except Exception as e:
                print("its an error:",e)
finally:
                print("done!")
Output:
enter b:0
the resource is open
its an error: division by zero
done!

enter b:12.5
its an error: invalid literal for int() with base 10: '12.5'
done!

OOPS
OBJECT ORIENTED PROGRAMMING STRUCTURE
its an efficient used in all object oriented programming lanuages like Java and Python
for multiple reasons we use oops concepts for example:
code reusability,data security,hiding data

CLASS is a blueprint 
example: birds,laptops

OBJECT is a thing created based on class
NOTE:
one class can have multiple objects
Example:
class birds
parrot,pigeon,crow,peacock -----objects
class laptops
lenovo,dell,hp ---------objects

example:
#creation of a class and its objects
class birds:      #creation of a class
                def type(self):       #creation of a method in a class
                                print("its a bird")
pigeon=birds()        # creation of an object1
pigeon.type()          # accessing the method of the class using . operator

crow=birds()           #object2
crow.type()
o/p:
its a bird
its a bird

#a class without a method
class computer:
                print("hrllo")
obj=computer()
o/p:
hrllo

#constructor
class Employee:
                def __init__(self,name,id):
                                 self.name=name
                                 self.id=id
#method with _ is dundard method & a constructor
                def display(self):
                                print(self.name,self.id)
obj1=Employee("h",12)
obj2=Employee("i",20)
obj1.display()
obj2.display()
o/p:
h 12
i 20

#variables and variable access in class and method
class computer:
                a=10        #global scope and class variables a&b
                b=20
                print("class or instance variable:",a,b)
                def display(self):
                                c=100      #local scope
                                print("local variable:",c)
                                print("class variable inside method:",self.a)
obj1=computer()
print(obj1.a)
print("sum:",obj1.a+obj1.b)
obj1.display()
obj2=computer()
print(obj2.b)
print(obj1.c)
o/p:
class or instance variable: 10 20
10
sum: 30
local variable: 100
class variable inside method: 10
20
Traceback (most recent call last):
  File "C:\Users\Shah\OneDrive\Desktop\DAY_6_WKSP\DAY_6_PROGRAMS.py", line 100, in <module>
    print(obj1.c)
AttributeError: 'computer' object has no attribute 'c'

